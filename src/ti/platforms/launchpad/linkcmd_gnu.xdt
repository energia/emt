%%{
/* --COPYRIGHT--,EPL
 *  Copyright (c) 2014 Texas Instruments and others.
 *  All rights reserved. This program and the accompanying materials
 *  are made available under the terms of the Eclipse Public License v1.0
 *  which accompanies this distribution, and is available at
 *  http://www.eclipse.org/legal/epl-v10.html
 * 
 *  Contributors:
 *      Texas Instruments - initial implementation
 * 
 * --/COPYRIGHT--*/

/* Linker templates are passed the following arguments:
 *      $out        - an open file stream for the generated linker
 *                    command file
 *      $args[]     - array of zero or more libraries that should be linked
 *                    with (in the order they appear in the argument list)
 *
 *  We can't add "'s around names; otherwise the GNU linker looks for names
 *  with "'s.
 *
 */
    var VARIANT = Program.platform.$module.$orig.variantPath;
%%}
/*
 * This file was generated by linkcmd_gnu.xdt from the `Program.platform.$package.$name` package.
 */

__STACK_SIZE = `utils.toHex(Program.stack)`;
__TI_STACK_SIZE = __STACK_SIZE;

%if ($args.length > 0) {
INPUT(
    %/* put all *.o* objects ahead of all libraries/archives */
    %var libs = [];
    %for (var i = 0; i < $args.length; i++) {
        %if ($args[i].match(/\.o[^\.]+$/)) {
    `$args[i]`
        %} else {
        %    libs.push($args[i]);
        %}
    %}
    %for (var i = 0; i < libs.length; i++) {
    `libs[i].replace(/\/\${variantPath}\//, VARIANT)`
    %}
)
%}

/*
 * symbolic aliases for static instance objects
 */
%for (var sym in Program.symbol) {
    %var inst = Program.symbol[sym];
    %if (typeof(inst) == 'number') {
`sym` = `inst`;
    %}
    %else {
        %var objTab = inst.$module.$name.replace(/\./g, '_') + '_Object__table__V';
        %var off = Program.$capsule.instSize(inst) * inst.$index;
`sym` = `objTab` + `off`;
    %}
%}

%if (Program.platform.$orig.includeLinkCmdFile) {
%    var linkFile = Program.platform.$package.packageBase + '/include_gnu/'
%    + Program.cpu.deviceName.toUpperCase() + '.lds';
INCLUDE "`linkFile`"
%}

SECTIONS {
%var _utils = xdc.loadCapsule("gnu/targets/linkUtils.xs");
    `_utils.genSections(Program)`

%   if (!Program.cpu.deviceName.match("ROM")) {
    .data : {
         *(.data*)
    } > REGION_DATA AT> REGION_TEXT
    __data_end__ = __data_start__ + SIZEOF(.data);

%   }
    /*
     * Linker command file contributions from all loaded packages:
     */
    `_utils.genContributions($args)`

    __TI_STACK_BASE = __stack;
}

SECTIONS {
    /* create an empty sections at the end of SRAM and FLASH */
    .empty : { *(.empty) KEEP(*(xdc.meta)) } > SRAM
    .emptyFlash : { *(.emptyFlash) } > FLASH

    /* the UNUSED symbols define reusable heap memory */
    __UNUSED_SRAM_start__ = ADDR(.empty);
    __UNUSED_SRAM_end__   = ORIGIN(SRAM) + LENGTH(SRAM);
    __SRAM_LENGTH__       = LENGTH(SRAM);
    
    __UNUSED_FLASH_start__ = ADDR(.emptyFlash);
    __UNUSED_FLASH_end__   = ORIGIN(FLASH) + LENGTH(FLASH);
    __FLASH_LENGTH__       = LENGTH(FLASH);
}

ENTRY(_c_int00)

/* function aliases */
%    for (var keys = this.$$aliases.keys(); keys.hasMoreElements(); ) {
%        var key = keys.nextElement();
`key` = `this.$$aliases.get(key)`;
%    }

