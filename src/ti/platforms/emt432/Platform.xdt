%%{
/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
*/
    /* get the input template directory and the output directory */
    var inputDir  = this.$package.$name.replace(/\./g, '/') + "/templates";
    var outputDir = this.$private.src.getGenSourceDir();
    
    /* generate makefile from makefile.xdt 
     *    $args[0] = the RTSC target, so the makefile knows how to run the
     *               compiler and archiver
     */
    //print("generating platform make files ... (" + outputDir + ")");
    var tfile = inputDir + "/makefile.xdt";
    var tplt = xdc.loadTemplate(tfile);
    tplt.genFile(outputDir + "/makefile", this,
                 [tfile, Program.build.target]);

    /* generate top-level Board_init.c function */
    //print("generating Platform init files ... ");
    tfile = inputDir + "/Board_init.c.xdt";
    tplt = xdc.loadTemplate(tfile);
    tplt.genFile(outputDir + "/Board_init.c", this,
                 [tfile, Program.build.target]);

    /* generate top-level Board.h header */
    tfile = inputDir + "/Board.h.xdt";
    tplt = xdc.loadTemplate(tfile);
    tplt.genFile(outputDir + "/Board.h", this,
                 [tfile, Program.build.target]);

    /* generate "marker" file that tells CDT to *NOT* add the sources in
     * this directory to the project
     */
    var file = java.io.FileWriter(outputDir + "/.exclude");
    file.close()
%%}
%if (Program.build.target.$name.match(/^gnu\.targets/) &&
%    (Program.build.target.name == "M4F")) {
UChar ti_platforms_msp432_stack[`Program.stack`] __attribute__ ((aligned(8), section (".stack")));
% }
