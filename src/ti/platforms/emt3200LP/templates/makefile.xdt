%%{
    /*
     *  ======== makefile.xdt ========
     *  makefile template
     *
     *  See http://rtsc.eclipse.org/docs-tip/XDCscript_-_Template-Body for an
     *  example of what can be done with templates.
     */
    var Platform = this;
    var isWindows = environment["os.name"].match(/Windows.*/i);
    var srcFile = $args[0];
    var TARGET  = $args[1];

    var CGEN = TARGET.rootDir.replace(/\\/g, "/");
    var CGENI = '-I "' + CGEN + '/include"';

    /* make sure header files from the target are available */
    var TRGPKG = TARGET.$name.replace(/\.[^\.]*$/, "");
    var TRGI = xdc.getPackageRepository(TRGPKG);

    /* compute include path from package path */
    var PATHI = "";
    var pkgPath = xdc.curPath().split(';');
    for (var i = 0; i < pkgPath.length; i++) {
        if (pkgPath[i] != "") {
            PATHI += '-I "' + java.io.File(pkgPath[i]).getCanonicalPath() + '" ';
        }
    }
    
    /* find device headers */
    var DLIB = Platform.findDriverLib();
    var DLIBI = DLIB ? ('-I "' + DLIB + '"') : "";
    
    /* get location of the config script */
    var PROJ = java.io.File(Program.build.cfgScript).getParent();
    PROJ = (PROJ == null) ? "." : String(PROJ).replace(/\\/g, '/');
    var PROJI = '-I "' + PROJ + '"';
    
    var CC_CMD;
    var AR_CMD;
    if (TARGET.cc.cmd.indexOf("$(") == 0) {
        var Utils = xdc.module("xdc.bld.Utils");
        CC_CMD = Utils.expandString(TARGET.cc.cmd, TARGET);
        AR_CMD = Utils.expandString(TARGET.ar.cmd, TARGET);
    }
    else {
        CC_CMD = CGEN + "/bin/" + TARGET.cc.cmd;
        AR_CMD = CGEN + "/bin/" + TARGET.ar.cmd;
    }

    /* add "'s around cmds to workaround bug in error parser (8/21/2012) */
    CC_CMD = '"' + CC_CMD.replace(/(^[^\s]+)/, '$1"');
    AR_CMD = '"' + AR_CMD.replace(/(^[^\s]+)/, '$1"');
    
    /* compute cfg header path */
    var tmp = Program.build.cfgScript.match(/([^\\/]*)\.cfg$/);
    if (tmp != null) {
        var cfgRootName = tmp[1];
        tmp = java.io.File(".").getCanonicalPath() + "/package/cfg/" + cfgRootName + "_p" + TARGET.suffix + ".h";
        var CFGHEADER = '"' + tmp.replace(/\\/g, '/') + '"';
    }
%%}
# 
# DO NOT EDIT: The following content was generated by the template file:
#    `this.$package.$name + ':' + "templates/makefile.xdt"`
#
all: emt3200LP.lib ;

.debug:
	@echo "  -------- Build Settings --------"
	@echo "    CCOPTS = $(CCOPTS)"
	@echo "    XDCtools defines: "
	@echo "        xdc_target_types__ = `TARGET.stdInclude`"
	@echo "        xdc_target_name__  = `TARGET.name`"
	@echo "        xdc_cfg__header__  = `CFGHEADER`"
	@echo "    compiler headers: '`CGEN`/include'"
	@echo "    device   headers: '`DLIBI`'"
	@echo "    package  headers: '`xdc.curPath()`'"
	@echo "    project  headers: '`PROJ`'"
	@echo "  --------------------------------"
	@echo ""

emt3200LP.lib: Board_init.obj

# optional compiler flags
CCOPTS ?= `TARGET.ccOpts.prefix` `TARGET.ccOpts.suffix`

# required C preprocessor flags
#    XDCtools defines: xdc_target_types__ = `TARGET.stdInclude`
#                      xdc_target_name__  = `TARGET.name`
#                      xdc_cfg__header__  = `CFGHEADER`
#    compiler headers: "`CGEN`/include"
#    device   headers: "`DLIBI`"
#    package  headers: `xdc.curPath()`
#    project  headers: "`PROJ`"
CPPFLAGS = -D__MSP432P401R__=1 -Dxdc_target_types__=`TARGET.stdInclude` -Dxdc_target_name__=`TARGET.name` `CGENI` `DLIBI` `PATHI` `PROJI`

# the compiler and archiver commands
CC = `CC_CMD` `TARGET.cc.opts`
AR = `AR_CMD` `TARGET.ar.opts`

# host OS filesystem commands
%if (isWindows) {
RM = cmd.exe /q /c del /f
MKDIR = mkdir
%}
%else {
RM = rm -f
MKDIR = mkdir -p
%}

# we never link with emt3200LP.lib, but we need to create this file 
# to satisfy make dependencies: otherwise, make will constantly 
# (unnecessarily) re-link apps using emt3200LP
emt3200LP.lib:
	@echo this file only exists to satisfy make dependencies > $@

# pattern rule to compile .c source to an object file
`""`%.obj:%.c makefile
	@echo cl`TARGET.suffix` $< ...
	$(CC) $(CCOPTS) $(CPPFLAGS) "$<" `TARGET.$name.indexOf("gnu.") == 0 ? "-o $@" : ""`

# clean removes all generated files
clean:
	-$(RM) Board_init.obj
	-$(RM) emt3200LP.lib

