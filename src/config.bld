/*
 *  ======== config.bld ========
 *  This script is run prior to all build scripts.  It initializes the
 *  rootDir configuration parameter of all supported targets.
 *
 */

/* initialize target rootDirs with those set via XDCARGS */
for (var arg = 0; arg < arguments.length; arg++) {
    var pair = arguments[arg].split("=");
    var name = pair[0];
    var value = pair[1];

    if (name.match(/^(ti|gnu)\.targets/)) {
        var targ = xdc.useModule(name);
        targ.rootDir = value;
	print(name + ".rootDir = " + value);
    }
}

/* configure default target options */
var vtools = environment["TOOLS"] + "/vendors";
var os     = environment["xdc.hostOS"];

/* TI compiler configuration settings */
var tiTargets = xdc.loadPackage('ti.targets.arm.elf');
tiTargets.M4.ccOpts.suffix  += " -ms --relaxed_ansi --display_error_number ";
tiTargets.M4F.ccOpts.suffix += " -ms --relaxed_ansi --display_error_number ";
if (tiTargets.M4F.rootDir == null) {
    tiTargets.M4F.rootDir = vtools + "/ti/arm/5.2.2/" + os;
}
tiTargets.M4.rootDir = tiTargets.M4F.rootDir;

/* Gnu compiler configuration settings */
var gnuTargets = xdc.loadPackage('gnu.targets.arm');
gnuTargets.M4.LONGNAME  = "bin/arm-none-eabi-gcc";
gnuTargets.M4F.LONGNAME = gnuTargets.M4.LONGNAME;
if (os == "Linux" && gnuTargets.M4F.rootDir == null) {
    gnuTargets.M4F.rootDir = vtools + "/linaro/4.8-2014q3/" + os;
}
gnuTargets.M4.rootDir  = gnuTargets.M4F.rootDir;

gnuTargets.M4F.lnkOpts.suffix += " -lstdc++";
gnuTargets.M4.lnkOpts.suffix  += " -lstdc++";

if (false) {
    /* define exceptions as default for both TI and GCC */
    gnuTargets.M4F.ccOpts.suffix += " -gdwarf-3";
    gnuTargets.M4.ccOpts.suffix  += " -gdwarf-3";
//    tiTargets.M4F.ccOpts.suffix = " --exceptions"; /* must be used on all C++ files (TI's compiler exits if this is used on .c files) */
    tiTargets.M4F.lnkOpts.suffix = " -c -m $(XDCCFGDIR)/$@.map -i $(rootDir)/lib --disable_auto_rts --library=rtsv7M4_T_le_v4SPD16_eabi_eh.lib";
}
else {
    gnuTargets.M4F.ccOpts.suffix += " -gdwarf-3 -fno-exceptions";
    gnuTargets.M4.ccOpts.suffix  += " -gdwarf-3 -fno-exceptions";
}

/* define the set of targets for which to build */
if (Pkg.name.match(/432/)) {
    if (gnuTargets.M4F.rootDir != null) Build.targets.$add(gnuTargets.M4F);
    if (tiTargets.M4F.rootDir != null)  Build.targets.$add(tiTargets.M4F);
}
else if (Pkg.name.match(/3200/)) {
    if (gnuTargets.M4.rootDir != null) Build.targets.$add(gnuTargets.M4);
    if (tiTargets.M4.rootDir != null)  Build.targets.$add(tiTargets.M4);
}
else if (Pkg.name.match(/\.runtime\./)) {
    if (gnuTargets.M4F.rootDir != null) Build.targets.$add(gnuTargets.M4F);
    if (tiTargets.M4F.rootDir != null)  Build.targets.$add(tiTargets.M4F);
    if (gnuTargets.M4.rootDir != null) Build.targets.$add(gnuTargets.M4);
    if (tiTargets.M4.rootDir != null)  Build.targets.$add(tiTargets.M4);
}
else {
    Build.useTargets = null;
}

gnuTargets.M4F.platform = "ti.platforms.emt432LP";
tiTargets.M4F.platform =  "ti.platforms.emt432LP";

gnuTargets.M4.platform = "ti.platforms.emt3200LP";
tiTargets.M4.platform =  "ti.platforms.emt3200LP";

/* For now, the default is to export everthing */
Pkg.attrs.exportAll = true;

Pkg.releasePrefix = "^/../exports/"; /* export to the exports directoy */
Pkg.attrs.archiver = "zip";          /* export .zip files (not .tar) */
Pkg.producerId = xdc.csd();          /* tag pkgs as coming from this dir */
